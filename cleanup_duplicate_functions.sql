-- =====================================================
-- LIMPEZA DE FUN√á√ïES DUPLICADAS OU ANTIGAS
-- =====================================================
-- Este script remove vers√µes antigas das fun√ß√µes que podem
-- ainda estar aparecendo como "MUT√ÅVEL" no relat√≥rio

-- =====================================================
-- 1. VERIFICAR FUN√á√ïES DUPLICADAS
-- =====================================================

-- Listar todas as vers√µes da fun√ß√£o insert_user_profile_on_registration
SELECT 
    p.oid,
    p.proname as function_name,
    pg_get_function_identity_arguments(p.oid) as arguments,
    CASE 
        WHEN p.proconfig IS NULL THEN 'MUT√ÅVEL ‚ùå'
        WHEN array_to_string(p.proconfig, ', ') LIKE '%search_path%' THEN 'SEGURO ‚úÖ'
        ELSE 'MUT√ÅVEL ‚ùå'
    END as search_path_status,
    array_to_string(p.proconfig, ', ') as current_config,
    pg_get_functiondef(p.oid) as function_definition
FROM pg_proc p
JOIN pg_namespace n ON p.pronamespace = n.oid
WHERE n.nspname = 'public'
AND p.proname = 'insert_user_profile_on_registration'
ORDER BY p.oid;

-- =====================================================
-- 2. REMOVER VERS√ïES ANTIGAS (SE NECESS√ÅRIO)
-- =====================================================

-- Se houver m√∫ltiplas vers√µes, remover as antigas
-- CUIDADO: Execute apenas se confirmar que h√° vers√µes duplicadas

/*
-- Exemplo de remo√ß√£o (descomente apenas se necess√°rio):
DROP FUNCTION IF EXISTS insert_user_profile_on_registration(uuid, text, text, text);
*/

-- =====================================================
-- 3. RECRIAR A FUN√á√ÉO FINAL (GARANTIA)
-- =====================================================

-- Recriar a fun√ß√£o com a vers√£o mais atualizada e segura
CREATE OR REPLACE FUNCTION insert_user_profile_on_registration(
    p_user_id uuid,
    p_full_name text,
    p_cpf text,
    p_email text
)
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
DECLARE
    result json;
BEGIN
    -- Log da execu√ß√£o da fun√ß√£o
    RAISE NOTICE 'Executando insert_user_profile_on_registration para user_id: %', p_user_id;
    
    -- Insere nas prefer√™ncias do usu√°rio
    INSERT INTO public.user_preferences (
        id,
        theme,
        notifications,
        language,
        created_at,
        updated_at
    ) VALUES (
        p_user_id,
        'light',
        true,
        'pt-BR',
        NOW(),
        NOW()
    )
    ON CONFLICT (id) DO UPDATE SET
        updated_at = NOW();

    -- Insere no perfil do usu√°rio
    INSERT INTO public.user_profiles (
        user_id,
        full_name,
        cpf,
        email,
        email_verified,
        preferences,
        notes,
        account_status,
        permissions,
        created_at,
        updated_at
    ) VALUES (
        p_user_id,
        p_full_name,
        p_cpf,
        p_email,
        false,
        jsonb_build_object(
            'registration_source', 'web_form',
            'profile_completed', true,
            'onboarding_completed', false,
            'terms_accepted', true,
            'registration_date', NOW()::text
        ),
        '[]'::jsonb,
        'free',
        '["basic_user"]'::jsonb,
        NOW(),
        NOW()
    )
    ON CONFLICT (user_id) DO UPDATE SET
        full_name = EXCLUDED.full_name,
        cpf = EXCLUDED.cpf,
        email = EXCLUDED.email,
        updated_at = NOW();

    -- Retorna sucesso
    result := json_build_object(
        'success', true,
        'message', 'Perfil do usu√°rio criado com sucesso',
        'user_id', p_user_id,
        'timestamp', NOW()
    );
    RETURN result;

EXCEPTION
    WHEN OTHERS THEN
        result := json_build_object(
            'success', false,
            'error', SQLERRM,
            'error_code', SQLSTATE,
            'user_id', p_user_id,
            'timestamp', NOW()
        );
        RETURN result;
END;
$$;

-- Conceder permiss√µes
GRANT EXECUTE ON FUNCTION insert_user_profile_on_registration(uuid, text, text, text) TO authenticated;
GRANT EXECUTE ON FUNCTION insert_user_profile_on_registration(uuid, text, text, text) TO anon;
GRANT EXECUTE ON FUNCTION insert_user_profile_on_registration(uuid, text, text, text) TO service_role;

-- =====================================================
-- 4. VERIFICA√á√ÉO FINAL
-- =====================================================

-- Verificar se agora todas as inst√¢ncias est√£o seguras
SELECT 
    'VERIFICA√á√ÉO FINAL' as status,
    p.proname as function_name,
    CASE 
        WHEN p.proconfig IS NULL THEN 'MUT√ÅVEL (PRECISA CORRE√á√ÉO) ‚ùå'
        WHEN array_to_string(p.proconfig, ', ') LIKE '%search_path%' THEN 'SEGURO ‚úÖ'
        ELSE 'MUT√ÅVEL (PRECISA CORRE√á√ÉO) ‚ùå'
    END as search_path_status,
    array_to_string(p.proconfig, ', ') as current_config
FROM pg_proc p
JOIN pg_namespace n ON p.pronamespace = n.oid
WHERE n.nspname = 'public'
AND p.proname IN (
    'insert_user_profile_on_registration',
    'format_phone_number',
    'update_updated_at_column'
)
ORDER BY function_name;

-- =====================================================
-- INSTRU√á√ïES
-- =====================================================

/*
üéØ COMO USAR:

1. Execute a primeira consulta para ver se h√° fun√ß√µes duplicadas
2. Se houver vers√µes antigas, descomente e execute a remo√ß√£o
3. Execute a recria√ß√£o da fun√ß√£o (sempre seguro)
4. Execute a verifica√ß√£o final
5. Todas as fun√ß√µes devem mostrar "SEGURO ‚úÖ"

üîí RESULTADO ESPERADO:
- Apenas uma vers√£o de cada fun√ß√£o
- Todas com search_path="" 
- Status "SEGURO ‚úÖ" para todas
*/