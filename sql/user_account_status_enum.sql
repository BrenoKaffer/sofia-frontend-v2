-- =====================================================
-- CRIA√á√ÉO DO ENUM PARA STATUS DE CONTA DE USU√ÅRIO
-- =====================================================

-- 1. Criar o tipo ENUM para status de conta
CREATE TYPE public.account_status_enum AS ENUM (
    'active',      -- ‚úÖ Usu√°rio ativo (acesso liberado)
    'free',        -- ‚úÖ Usu√°rio gratuito (acesso liberado) 
    'premium',     -- ‚úÖ Usu√°rio premium (acesso liberado)
    'trial',       -- ‚úÖ Usu√°rio em per√≠odo de teste (acesso liberado)
    'admin',       -- üîß Administrador (acesso total + painel admin)
    'superadmin',  -- üëë Super administrador (acesso total + controle sistema)
    'blocked',     -- ‚ùå Usu√°rio bloqueado (acesso negado)
    'suspended',   -- ‚ùå Usu√°rio suspenso (acesso negado)
    'banned',      -- ‚ùå Usu√°rio banido (acesso negado)
    'inactive',    -- ‚è∏Ô∏è Usu√°rio inativo (acesso limitado)
    'pending'      -- ‚è≥ Usu√°rio pendente de verifica√ß√£o
);

-- 2. ALTERAR TABELA user_profiles PARA USAR O ENUM
-- Primeiro, vamos adicionar uma nova coluna tempor√°ria
ALTER TABLE public.user_profiles 
ADD COLUMN account_status_new public.account_status_enum DEFAULT 'free';

-- 3. MIGRAR DADOS EXISTENTES
-- Mapear valores existentes para o novo enum
UPDATE public.user_profiles 
SET account_status_new = CASE 
  WHEN account_status = 'free' THEN 'free'::public.account_status_enum
  WHEN account_status = 'premium' THEN 'premium'::public.account_status_enum
  WHEN account_status = 'active' THEN 'active'::public.account_status_enum
  WHEN account_status = 'blocked' THEN 'blocked'::public.account_status_enum
  WHEN account_status = 'suspended' THEN 'suspended'::public.account_status_enum
  WHEN account_status = 'banned' THEN 'banned'::public.account_status_enum
  WHEN account_status = 'inactive' THEN 'inactive'::public.account_status_enum
  ELSE 'free'::public.account_status_enum -- Default para valores n√£o reconhecidos
END;

-- 4. REMOVER COLUNA ANTIGA E RENOMEAR A NOVA
ALTER TABLE public.user_profiles DROP COLUMN account_status;
ALTER TABLE public.user_profiles RENAME COLUMN account_status_new TO account_status;

-- 5. DEFINIR NOT NULL E DEFAULT
ALTER TABLE public.user_profiles 
ALTER COLUMN account_status SET NOT NULL,
ALTER COLUMN account_status SET DEFAULT 'free';

-- =====================================================
-- FUN√á√ïES AUXILIARES PARA VERIFICA√á√ÉO DE STATUS
-- =====================================================

-- Fun√ß√£o para verificar se usu√°rio tem acesso liberado
CREATE OR REPLACE FUNCTION public.user_has_access(status public.account_status_enum)
RETURNS boolean AS $$
BEGIN
  RETURN status IN ('active', 'free', 'premium', 'trial', 'admin', 'superadmin');
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Fun√ß√£o para verificar se usu√°rio est√° bloqueado
CREATE OR REPLACE FUNCTION public.user_is_blocked(status public.account_status_enum)
RETURNS boolean AS $$
BEGIN
  RETURN status IN ('blocked', 'suspended', 'banned');
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Fun√ß√£o para verificar se usu√°rio √© premium
CREATE OR REPLACE FUNCTION public.user_is_premium(status public.account_status_enum)
RETURNS boolean AS $$
BEGIN
  RETURN status IN ('premium', 'trial');
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Fun√ß√£o para verificar se usu√°rio tem acesso limitado
CREATE OR REPLACE FUNCTION public.user_has_limited_access(status public.account_status_enum)
RETURNS boolean AS $$
BEGIN
  RETURN status IN ('inactive', 'pending');
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Fun√ß√£o para verificar se usu√°rio √© admin
CREATE OR REPLACE FUNCTION public.user_is_admin(status public.account_status_enum)
RETURNS boolean AS $$
BEGIN
  RETURN status IN ('admin', 'superadmin');
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Fun√ß√£o para verificar se usu√°rio √© superadmin
CREATE OR REPLACE FUNCTION public.user_is_superadmin(status public.account_status_enum)
RETURNS boolean AS $$
BEGIN
  RETURN status = 'superadmin';
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- =====================================================
-- VIEWS PARA FACILITAR CONSULTAS
-- =====================================================

-- View com usu√°rios ativos (acesso liberado)
CREATE OR REPLACE VIEW public.active_users AS
SELECT 
  up.*,
  au.email as auth_email,
  au.created_at as auth_created_at
FROM public.user_profiles up
JOIN auth.users au ON up.user_id = au.id
WHERE public.user_has_access(up.account_status);

-- View com usu√°rios bloqueados
CREATE OR REPLACE VIEW public.blocked_users AS
SELECT 
  up.*,
  au.email as auth_email,
  au.created_at as auth_created_at
FROM public.user_profiles up
JOIN auth.users au ON up.user_id = au.id
WHERE public.user_is_blocked(up.account_status);

-- View com usu√°rios premium
CREATE OR REPLACE VIEW public.premium_users AS
SELECT 
  up.*,
  au.email as auth_email,
  au.created_at as auth_created_at
FROM public.user_profiles up
JOIN auth.users au ON up.user_id = au.id
WHERE public.user_is_premium(up.account_status);

-- View com usu√°rios pendentes
CREATE OR REPLACE VIEW public.pending_users AS
SELECT 
  up.*,
  au.email as auth_email,
  au.created_at as auth_created_at
FROM public.user_profiles up
JOIN auth.users au ON up.user_id = au.id
WHERE up.account_status = 'pending';

-- View com usu√°rios inativos
CREATE OR REPLACE VIEW public.inactive_users AS
SELECT 
  up.*,
  au.email as auth_email,
  au.created_at as auth_created_at
FROM public.user_profiles up
JOIN auth.users au ON up.user_id = au.id
WHERE up.account_status = 'inactive';

-- View com usu√°rios administradores
CREATE OR REPLACE VIEW public.admin_users AS
SELECT 
  up.*,
  au.email as auth_email,
  au.created_at as auth_created_at
FROM public.user_profiles up
JOIN auth.users au ON up.user_id = au.id
WHERE public.user_is_admin(up.account_status);

-- View com super administradores
CREATE OR REPLACE VIEW public.superadmin_users AS
SELECT 
  up.*,
  au.email as auth_email,
  au.created_at as auth_created_at
FROM public.user_profiles up
JOIN auth.users au ON up.user_id = au.id
WHERE public.user_is_superadmin(up.account_status);

-- =====================================================
-- √çNDICES PARA PERFORMANCE
-- =====================================================

-- √çndice para consultas por status
CREATE INDEX IF NOT EXISTS idx_user_profiles_account_status 
ON public.user_profiles(account_status);

-- √çndice composto para consultas frequentes
CREATE INDEX IF NOT EXISTS idx_user_profiles_status_created 
ON public.user_profiles(account_status, created_at);

-- =====================================================
-- TRIGGERS PARA AUDITORIA DE MUDAN√áAS DE STATUS
-- =====================================================

-- Tabela para log de mudan√ßas de status
CREATE TABLE IF NOT EXISTS public.user_status_changes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  old_status public.account_status_enum,
  new_status public.account_status_enum NOT NULL,
  changed_by text, -- Email ou ID de quem fez a mudan√ßa
  reason text, -- Motivo da mudan√ßa
  metadata jsonb DEFAULT '{}',
  changed_at timestamp with time zone NOT NULL DEFAULT now(),
  
  CONSTRAINT user_status_changes_pkey PRIMARY KEY (id),
  CONSTRAINT user_status_changes_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);

-- Fun√ß√£o para registrar mudan√ßas de status
CREATE OR REPLACE FUNCTION public.log_status_change()
RETURNS TRIGGER AS $$
BEGIN
  -- S√≥ registra se o status realmente mudou
  IF OLD.account_status IS DISTINCT FROM NEW.account_status THEN
    INSERT INTO public.user_status_changes (
      user_id, 
      old_status, 
      new_status,
      changed_by,
      reason
    ) VALUES (
      NEW.user_id,
      OLD.account_status,
      NEW.account_status,
      current_setting('app.current_user_email', true), -- Configurado pela aplica√ß√£o
      current_setting('app.status_change_reason', true) -- Configurado pela aplica√ß√£o
    );
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para log autom√°tico
CREATE TRIGGER user_profiles_status_change_log
  AFTER UPDATE ON public.user_profiles
  FOR EACH ROW
  EXECUTE FUNCTION public.log_status_change();

-- =====================================================
-- DADOS DE EXEMPLO E COMENT√ÅRIOS
-- =====================================================

-- Coment√°rios sobre cada status:
COMMENT ON TYPE public.account_status_enum IS 'Status da conta do usu√°rio: active/free/premium/trial (acesso liberado), blocked/suspended/banned (acesso negado), inactive (limitado), pending (verifica√ß√£o)';

-- Exemplos de uso:
/*
-- Bloquear usu√°rio
UPDATE public.user_profiles 
SET account_status = 'blocked' 
WHERE user_id = 'uuid-do-usuario';

-- Promover para premium
UPDATE public.user_profiles 
SET account_status = 'premium' 
WHERE user_id = 'uuid-do-usuario';

-- Consultar usu√°rios ativos
SELECT * FROM public.active_users;

-- Verificar se usu√°rio tem acesso (no c√≥digo da aplica√ß√£o)
SELECT public.user_has_access(account_status) as has_access
FROM public.user_profiles 
WHERE user_id = 'uuid-do-usuario';
*/