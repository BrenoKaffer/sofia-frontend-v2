'use client';

import { useState } from 'react';
import { DashboardLayout } from '@/components/dashboard/layout';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { 
  Eye, 
  Activity, 
  TrendingUp, 
  History, 
  Filter, 
  Bell, 
  Settings, 
  Download,
  RefreshCw,
  Clock,
  Flame,
  Snowflake,
  BarChart3
} from 'lucide-react';

// Mock data para demonstração
const mockRoulettes = [
  {
    id: '1',
    name: 'Evolution Auto Roulette VIP',
    status: 'online',
    isMonitored: true,
    isSpinning: false,
    lastNumbers: [23, 7, 14, 31, 0, 18, 9, 26, 35, 3, 12, 28, 7, 21, 34, 16, 5, 29, 11, 2],
    hotNumbers: [7, 23, 14, 31, 18],
    coldNumbers: [1, 4, 6, 8, 10],
    totalSpins: 1247,
    lastUpdate: '2024-01-15 14:30:25'
  },
  {
    id: '2', 
    name: 'Lightning Roulette',
    status: 'online',
    isMonitored: false,
    isSpinning: true,
    lastNumbers: [15, 22, 8, 19, 33, 6, 24, 17, 1, 30, 13, 25, 4, 36, 20, 9, 27, 12, 32, 5],
    hotNumbers: [15, 22, 19, 33, 24],
    coldNumbers: [2, 7, 11, 14, 16],
    totalSpins: 892,
    lastUpdate: '2024-01-15 14:29:45'
  },
  {
    id: '3',
    name: 'Speed Roulette',
    status: 'offline',
    isMonitored: true,
    isSpinning: false,
    lastNumbers: [10, 25, 3, 18, 31, 7, 22, 14, 29, 6, 33, 11, 26, 2, 35, 19, 8, 23, 16, 4],
    hotNumbers: [10, 25, 18, 31, 22],
    coldNumbers: [0, 1, 5, 9, 12],
    totalSpins: 2156,
    lastUpdate: '2024-01-15 14:15:12'
  }
];

export default function RouletteStatusPage() {
  const [showMonitoredOnly, setShowMonitoredOnly] = useState(false);
  const [roulettes, setRoulettes] = useState(mockRoulettes);
  const [filterType, setFilterType] = useState('all');
  const [lastXSpins, setLastXSpins] = useState('20');
  const [showOnlineOnly, setShowOnlineOnly] = useState(false);
  const [selectedRoulette, setSelectedRoulette] = useState<string | null>(null);

  const toggleMonitored = (id: string) => {
    setRoulettes(roulettes.map(roulette => 
      roulette.id === id ? {...roulette, isMonitored: !roulette.isMonitored} : roulette
    ));
  };

  const getFilteredRoulettes = () => {
    let filtered = roulettes;
    
    if (showMonitoredOnly) {
      filtered = filtered.filter(r => r.isMonitored);
    }
    
    if (showOnlineOnly) {
      filtered = filtered.filter(r => r.status === 'online');
    }
    
    return filtered;
  };

  const getFilteredNumbers = (numbers: number[]) => {
    const limit = parseInt(lastXSpins);
    return numbers.slice(0, limit);
  };

  const displayedRoulettes = getFilteredRoulettes();

  const getStatusColor = (status: string) => {
    switch(status) {
      case 'online': return 'bg-primary text-primary-foreground';
      case 'offline': return 'bg-destructive text-destructive-foreground';
      case 'maintenance': return 'bg-warning text-background';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const getStatusText = (status: string) => {
    switch(status) {
      case 'online': return 'Online';
      case 'offline': return 'Offline';
      case 'maintenance': return 'Manutenção';
      default: return 'Desconhecido';
    }
  };

  return (
    <DashboardLayout>
      <div className="flex flex-col gap-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <History className="h-8 w-8 text-primary" />
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Histórico das Roletas</h1>
              <p className="text-muted-foreground">Acompanhe o status e histórico completo das roletas</p>
            </div>
          </div>
          <div className="flex items-center gap-4">
            <Button variant="outline" size="sm" className="gap-2">
              <RefreshCw className="h-4 w-4" />
              Atualizar
            </Button>
            <Button variant="outline" size="sm" className="gap-2">
              <Download className="h-4 w-4" />
              Exportar
            </Button>
          </div>
        </div>

        {/* Controles de Filtro */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="h-5 w-5" />
              Filtros e Configurações
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div className="space-y-2">
                <Label>Status das Roletas</Label>
                <div className="flex flex-col gap-2">
                  <div className="flex items-center space-x-2">
                    <Switch 
                      id="monitored-only"
                      checked={showMonitoredOnly} 
                      onCheckedChange={setShowMonitoredOnly} 
                    />
                    <Label htmlFor="monitored-only" className="text-sm">Apenas monitoradas</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Switch 
                      id="online-only"
                      checked={showOnlineOnly} 
                      onCheckedChange={setShowOnlineOnly} 
                    />
                    <Label htmlFor="online-only" className="text-sm">Apenas online</Label>
                  </div>
                </div>
              </div>
              
              <div className="space-y-2">
                <Label>Últimas Jogadas</Label>
                <Select value={lastXSpins} onValueChange={setLastXSpins}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="10">Últimas 10</SelectItem>
                    <SelectItem value="20">Últimas 20</SelectItem>
                    <SelectItem value="50">Últimas 50</SelectItem>
                    <SelectItem value="100">Últimas 100</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label>Tipo de Análise</Label>
                <Select value={filterType} onValueChange={setFilterType}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Todos os números</SelectItem>
                    <SelectItem value="hot">Números quentes</SelectItem>
                    <SelectItem value="cold">Números frios</SelectItem>
                    <SelectItem value="patterns">Padrões</SelectItem>
                    <SelectItem value="sequences">Sequências</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label>Ações Rápidas</Label>
                <div className="flex gap-2">
                  <Button variant="outline" size="sm" className="gap-1 flex-1">
                    <Bell className="h-4 w-4" />
                    Alertas
                  </Button>
                  <Button variant="outline" size="sm" className="gap-1 flex-1">
                    <BarChart3 className="h-4 w-4" />
                    Análise
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Tabs defaultValue="grid">
          <div className="flex justify-between items-center mb-4">
            <TabsList>
              <TabsTrigger value="grid">Visão Geral</TabsTrigger>
              <TabsTrigger value="history">Histórico Detalhado</TabsTrigger>
              <TabsTrigger value="heatmap">Mapa de Calor</TabsTrigger>
              <TabsTrigger value="analytics">Análises</TabsTrigger>
            </TabsList>
          </div>

          <TabsContent value="grid" className="mt-0">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {displayedRoulettes.map((roulette) => (
                <Card key={roulette.id} className={`overflow-hidden ${roulette.isMonitored ? 'border-primary/50' : ''}`}>
                  <CardHeader className="pb-2">
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle className="flex items-center gap-2">
                          {roulette.name}
                          {roulette.status === 'online' && (
                            <div className="h-2 w-2 bg-green-500 rounded-full animate-pulse" />
                          )}
                        </CardTitle>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge className={getStatusColor(roulette.status)}>
                            {getStatusText(roulette.status)}
                          </Badge>
                          {roulette.isSpinning && (
                            <Badge variant="outline" className="animate-pulse">
                              Girando
                            </Badge>
                          )}
                          <span className="text-xs text-muted-foreground flex items-center gap-1">
                            <Clock className="h-3 w-3" />
                            {roulette.lastUpdate}
                          </span>
                        </div>
                      </div>
                      <div className="flex flex-col gap-1">
                        <Button 
                          type="button"
                          variant={roulette.isMonitored ? "default" : "outline"}
                          size="sm"
                          className="gap-1"
                          onClick={() => toggleMonitored(roulette.id)}
                        >
                          <Eye className="h-4 w-4" />
                          {roulette.isMonitored ? 'Monitorando' : 'Monitorar'}
                        </Button>
                        <Button 
                          type="button"
                          variant="outline"
                          size="sm"
                          className="gap-1"
                        >
                          <Bell className="h-4 w-4" />
                          Alertas
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="text-sm font-medium">Últimos Números ({lastXSpins})</h4>
                          <span className="text-xs text-muted-foreground">{roulette.totalSpins} giros totais</span>
                        </div>
                        <div className="flex flex-wrap gap-1">
                          {getFilteredNumbers(roulette.lastNumbers).map((num, index) => (
                            <span 
                              key={index} 
                              className={`inline-flex items-center justify-center h-8 w-8 rounded-full text-sm font-medium ${
                                num === 0 ? 'bg-green-600 text-white' :
                                [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(num) ? 'bg-red-500 text-white' : 'bg-black text-white'
                              }`}
                            >
                              {num}
                            </span>
                          ))}
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <h4 className="text-sm font-medium mb-2 flex items-center gap-1">
                            <Flame className="h-4 w-4 text-red-500" />
                            Números Quentes
                          </h4>
                          <div className="flex gap-1">
                            {roulette.hotNumbers.map((num, index) => (
                              <span 
                                key={index} 
                                className={`inline-flex items-center justify-center h-6 w-6 rounded-full text-xs font-medium ${
                                  num === 0 ? 'bg-green-600 text-white' :
                                  [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(num) ? 'bg-red-500 text-white' : 'bg-black text-white'
                                }`}
                              >
                                {num}
                              </span>
                            ))}
                          </div>
                        </div>
                        <div>
                          <h4 className="text-sm font-medium mb-2 flex items-center gap-1">
                            <Snowflake className="h-4 w-4 text-blue-500" />
                            Números Frios
                          </h4>
                          <div className="flex gap-1">
                            {roulette.coldNumbers.map((num, index) => (
                              <span 
                                key={index} 
                                className={`inline-flex items-center justify-center h-6 w-6 rounded-full text-xs font-medium ${
                                  num === 0 ? 'bg-green-600 text-white' :
                                  [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(num) ? 'bg-red-500 text-white' : 'bg-black text-white'
                                }`}
                              >
                                {num}
                              </span>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="history" className="mt-0">
            <div className="space-y-4">
              {displayedRoulettes.map((roulette) => (
                <Card key={roulette.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="flex items-center gap-2">
                          {roulette.name}
                          <Badge className={getStatusColor(roulette.status)}>
                            {getStatusText(roulette.status)}
                          </Badge>
                        </CardTitle>
                        <CardDescription>
                          Histórico completo dos últimos {lastXSpins} números
                        </CardDescription>
                      </div>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm" className="gap-1">
                          <Bell className="h-4 w-4" />
                          Configurar Alerta
                        </Button>
                        <Button variant="outline" size="sm" className="gap-1">
                          <Download className="h-4 w-4" />
                          Exportar
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      {/* Estatísticas Rápidas */}
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div className="text-center p-3 bg-muted/50 rounded-lg">
                          <div className="text-2xl font-bold text-primary">{roulette.totalSpins}</div>
                          <div className="text-sm text-muted-foreground">Total de Giros</div>
                        </div>
                        <div className="text-center p-3 bg-muted/50 rounded-lg">
                          <div className="text-2xl font-bold text-red-500">{roulette.hotNumbers.length}</div>
                          <div className="text-sm text-muted-foreground">Números Quentes</div>
                        </div>
                        <div className="text-center p-3 bg-muted/50 rounded-lg">
                          <div className="text-2xl font-bold text-blue-500">{roulette.coldNumbers.length}</div>
                          <div className="text-sm text-muted-foreground">Números Frios</div>
                        </div>
                        <div className="text-center p-3 bg-muted/50 rounded-lg">
                          <div className="text-2xl font-bold text-green-500">{roulette.lastNumbers[0]}</div>
                          <div className="text-sm text-muted-foreground">Último Número</div>
                        </div>
                      </div>

                      {/* Tabela de Histórico */}
                      <div>
                        <h4 className="text-lg font-semibold mb-3">Histórico de Números</h4>
                        <div className="border rounded-lg overflow-hidden">
                          <div className="grid grid-cols-10 gap-1 p-4 bg-muted/30">
                            {getFilteredNumbers(roulette.lastNumbers).map((num, index) => (
                              <div key={index} className="text-center">
                                <div className="text-xs text-muted-foreground mb-1">#{getFilteredNumbers(roulette.lastNumbers).length - index}</div>
                                <div 
                                  className={`inline-flex items-center justify-center h-10 w-10 rounded-full text-sm font-medium ${
                                    num === 0 ? 'bg-green-600 text-white' :
                                    [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(num) ? 'bg-red-500 text-white' : 'bg-black text-white'
                                  }`}
                                >
                                  {num}
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>

                      {/* Análise de Padrões */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <h4 className="text-lg font-semibold mb-3 flex items-center gap-2">
                            <Flame className="h-5 w-5 text-red-500" />
                            Análise de Números Quentes
                          </h4>
                          <div className="space-y-2">
                            {roulette.hotNumbers.map((num, index) => (
                              <div key={index} className="flex items-center justify-between p-2 bg-red-50 dark:bg-red-950/20 rounded">
                                <div className="flex items-center gap-2">
                                  <span 
                                    className={`inline-flex items-center justify-center h-6 w-6 rounded-full text-xs font-medium ${
                                      num === 0 ? 'bg-green-600 text-white' :
                                      [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(num) ? 'bg-red-500 text-white' : 'bg-black text-white'
                                    }`}
                                  >
                                    {num}
                                  </span>
                                  <span className="font-medium">Número {num}</span>
                                </div>
                                <span className="text-sm text-muted-foreground">{Math.floor(Math.random() * 10) + 5} aparições</span>
                              </div>
                            ))}
                          </div>
                        </div>
                        
                        <div>
                          <h4 className="text-lg font-semibold mb-3 flex items-center gap-2">
                            <Snowflake className="h-5 w-5 text-blue-500" />
                            Análise de Números Frios
                          </h4>
                          <div className="space-y-2">
                            {roulette.coldNumbers.map((num, index) => (
                              <div key={index} className="flex items-center justify-between p-2 bg-blue-50 dark:bg-blue-950/20 rounded">
                                <div className="flex items-center gap-2">
                                  <span 
                                    className={`inline-flex items-center justify-center h-6 w-6 rounded-full text-xs font-medium ${
                                      num === 0 ? 'bg-green-600 text-white' :
                                      [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(num) ? 'bg-red-500 text-white' : 'bg-black text-white'
                                    }`}
                                  >
                                    {num}
                                  </span>
                                  <span className="font-medium">Número {num}</span>
                                </div>
                                <span className="text-sm text-muted-foreground">{Math.floor(Math.random() * 3) + 1} aparições</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="heatmap" className="mt-0">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5" />
                  Mapa de Calor das Roletas
                </CardTitle>
                <CardDescription>
                  Visualização da frequência de números por roleta nos últimos {lastXSpins} giros
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {displayedRoulettes.map((roulette) => (
                    <div key={roulette.id} className="space-y-4">
                      <div className="flex items-center justify-between">
                        <h3 className="text-lg font-semibold">{roulette.name}</h3>
                        <Badge className={getStatusColor(roulette.status)}>
                          {getStatusText(roulette.status)}
                        </Badge>
                      </div>
                      
                      {/* Grade de números da roleta */}
                      <div className="grid grid-cols-19 gap-1 p-4 bg-muted/30 rounded-lg">
                        {/* Linha superior: 3, 6, 9, ..., 36 */}
                        {[3,6,9,12,15,18,21,24,27,30,33,36].map((num) => {
                          const frequency = getFilteredNumbers(roulette.lastNumbers).filter(n => n === num).length;
                          const intensity = Math.min(frequency / 3, 1); // Normaliza para 0-1
                          return (
                            <div 
                              key={num}
                              className={`h-8 w-8 rounded text-xs font-medium flex items-center justify-center text-white relative group cursor-pointer`}
                              style={{
                                backgroundColor: num === 0 ? '#16a34a' : 
                                  [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(num) ? 
                                    `rgba(239, 68, 68, ${0.3 + intensity * 0.7})` : 
                                    `rgba(0, 0, 0, ${0.3 + intensity * 0.7})`
                              }}
                            >
                              {num}
                              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 bg-black text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                                {frequency} aparições
                              </div>
                            </div>
                          );
                        })}
                        
                        {/* Linha do meio: 2, 5, 8, ..., 35 */}
                        {[2,5,8,11,14,17,20,23,26,29,32,35].map((num) => {
                          const frequency = getFilteredNumbers(roulette.lastNumbers).filter(n => n === num).length;
                          const intensity = Math.min(frequency / 3, 1);
                          return (
                            <div 
                              key={num}
                              className={`h-8 w-8 rounded text-xs font-medium flex items-center justify-center text-white relative group cursor-pointer`}
                              style={{
                                backgroundColor: num === 0 ? '#16a34a' : 
                                  [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(num) ? 
                                    `rgba(239, 68, 68, ${0.3 + intensity * 0.7})` : 
                                    `rgba(0, 0, 0, ${0.3 + intensity * 0.7})`
                              }}
                            >
                              {num}
                              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 bg-black text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                                {frequency} aparições
                              </div>
                            </div>
                          );
                        })}
                        
                        {/* Linha inferior: 1, 4, 7, ..., 34 */}
                        {[1,4,7,10,13,16,19,22,25,28,31,34].map((num) => {
                          const frequency = getFilteredNumbers(roulette.lastNumbers).filter(n => n === num).length;
                          const intensity = Math.min(frequency / 3, 1);
                          return (
                            <div 
                              key={num}
                              className={`h-8 w-8 rounded text-xs font-medium flex items-center justify-center text-white relative group cursor-pointer`}
                              style={{
                                backgroundColor: num === 0 ? '#16a34a' : 
                                  [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(num) ? 
                                    `rgba(239, 68, 68, ${0.3 + intensity * 0.7})` : 
                                    `rgba(0, 0, 0, ${0.3 + intensity * 0.7})`
                              }}
                            >
                              {num}
                              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 bg-black text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                                {frequency} aparições
                              </div>
                            </div>
                          );
                        })}
                        
                        {/* Zero */}
                        {(() => {
                          const frequency = getFilteredNumbers(roulette.lastNumbers).filter(n => n === 0).length;
                          const intensity = Math.min(frequency / 3, 1);
                          return (
                            <div 
                              className={`h-8 w-8 rounded text-xs font-medium flex items-center justify-center text-white relative group cursor-pointer`}
                              style={{
                                backgroundColor: `rgba(22, 163, 74, ${0.3 + intensity * 0.7})`
                              }}
                            >
                              0
                              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 bg-black text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                                {frequency} aparições
                              </div>
                            </div>
                          );
                        })()}
                      </div>
                      
                      {/* Legenda */}
                      <div className="flex items-center justify-center gap-4 text-sm">
                        <div className="flex items-center gap-2">
                          <div className="h-4 w-4 bg-red-300 rounded"></div>
                          <span>Baixa frequência</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="h-4 w-4 bg-red-600 rounded"></div>
                          <span>Alta frequência</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="h-4 w-4 bg-green-600 rounded"></div>
                          <span>Zero</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="analytics" className="mt-0">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {displayedRoulettes.map((roulette) => (
                <Card key={roulette.id}>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <BarChart3 className="h-5 w-5" />
                      Análises - {roulette.name}
                    </CardTitle>
                    <CardDescription>
                      Padrões e tendências identificadas
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      {/* Distribuição por Cor */}
                      <div>
                        <h4 className="font-semibold mb-3">Distribuição por Cor</h4>
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <div className="h-4 w-4 bg-red-500 rounded"></div>
                              <span>Vermelho</span>
                            </div>
                            <span className="font-medium">
                              {getFilteredNumbers(roulette.lastNumbers).filter(n => [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(n)).length}
                            </span>
                          </div>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <div className="h-4 w-4 bg-black rounded"></div>
                              <span>Preto</span>
                            </div>
                            <span className="font-medium">
                              {getFilteredNumbers(roulette.lastNumbers).filter(n => ![1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36,0].includes(n)).length}
                            </span>
                          </div>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <div className="h-4 w-4 bg-green-600 rounded"></div>
                              <span>Zero</span>
                            </div>
                            <span className="font-medium">
                              {getFilteredNumbers(roulette.lastNumbers).filter(n => n === 0).length}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* Padrões Detectados */}
                      <div>
                        <h4 className="font-semibold mb-3">Padrões Detectados</h4>
                        <div className="space-y-2">
                          <div className="p-3 bg-yellow-50 dark:bg-yellow-950/20 rounded-lg">
                            <div className="flex items-center gap-2 mb-1">
                              <div className="h-2 w-2 bg-yellow-500 rounded-full"></div>
                              <span className="font-medium text-sm">Sequência de Vermelhos</span>
                            </div>
                            <p className="text-xs text-muted-foreground">3 números vermelhos consecutivos detectados</p>
                          </div>
                          <div className="p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg">
                            <div className="flex items-center gap-2 mb-1">
                              <div className="h-2 w-2 bg-blue-500 rounded-full"></div>
                              <span className="font-medium text-sm">Números Vizinhos</span>
                            </div>
                            <p className="text-xs text-muted-foreground">Números próximos na roda apareceram recentemente</p>
                          </div>
                        </div>
                      </div>

                      {/* Ações Recomendadas */}
                      <div>
                        <h4 className="font-semibold mb-3">Ações Recomendadas</h4>
                        <div className="space-y-2">
                          <Button variant="outline" size="sm" className="w-full gap-2">
                            <Bell className="h-4 w-4" />
                            Configurar Alerta para Padrão
                          </Button>
                          <Button variant="outline" size="sm" className="w-full gap-2">
                            <Download className="h-4 w-4" />
                            Exportar Análise Completa
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </DashboardLayout>
  );
}