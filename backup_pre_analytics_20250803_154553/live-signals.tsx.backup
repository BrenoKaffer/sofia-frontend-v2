'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Play, 
  Pause, 
  Clock, 
  Zap,
  ExternalLink
} from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import { motion, AnimatePresence } from 'framer-motion';

interface GeneratedSignal {
  id: string;
  strategy_id: string;
  table_id: string;
  bet_numbers: number[];
  confidence_level: number;
  expected_return: number;
  timestamp_generated: string;
  expires_at: string;
  status: string;
  message: string;
}

interface LiveSignalsProps {
  signals: GeneratedSignal[];
  loading?: boolean;
  onGoToTable?: (signal: GeneratedSignal) => void;
}

export function LiveSignals({ signals, loading = false, onGoToTable }: LiveSignalsProps) {
  const [displaySignals, setDisplaySignals] = useState<GeneratedSignal[]>(signals);
  const [isLive, setIsLive] = useState(true);
  const [signalCountdowns, setSignalCountdowns] = useState<{[key: string]: {timeLeft: number, progress: number}}>({});

  // Atualizar countdowns a cada segundo
  useEffect(() => {
    const interval = setInterval(() => {
      const newCountdowns: {[key: string]: {timeLeft: number, progress: number}} = {};
      
      displaySignals.forEach(signal => {
        const timeData = getTimeRemaining(signal.expires_at);
        const progress = calculateProgress(signal);
        newCountdowns[signal.id] = {
          timeLeft: timeData.timeLeft,
          progress: progress
        };
      });
      
      setSignalCountdowns(newCountdowns);
    }, 1000);

    return () => clearInterval(interval);
  }, [displaySignals]);

  useEffect(() => {
    setDisplaySignals(signals);
  }, [signals]);

  const getConfidencePercentage = (level: 'High' | 'Medium' | 'Low' | 'Unknown') => {
    switch (level) {
      case 'High':
        return 85;
      case 'Medium':
        return 65;
      case 'Low':
        return 35;
      default:
        return 0;
    }
  };


  const getTimeRemaining = (expires_at: string) => {
    if (!expires_at) return { timeLeft: 0, progress: 0, display: 'Expirado', isExpired: true };
    
    const now = new Date().getTime();
    const expiresAt = new Date(expires_at).getTime();
    
    // Verificar se a data é válida
    if (isNaN(expiresAt)) {
      return { timeLeft: 0, progress: 0, display: 'Tempo inválido', isExpired: true };
    }
    
    const timeLeft = Math.max(0, Math.floor((expiresAt - now) / 1000));
    
    if (timeLeft === 0) {
      return { timeLeft: 0, progress: 0, display: 'Expirado', isExpired: true };
    }
    
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    const display = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    return { timeLeft, progress: 0, display, isExpired: false };
  };

  const getRouletteNumbers = () => {
    return [
      0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5,
      24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26
    ];
  };

  const isValidRouletteNumber = (bet: any) => {
    const num = Number(bet);
    return !isNaN(num) && getRouletteNumbers().includes(num);
  };

  const getRouletteNumberColor = (number: number): string => {
    if (number === 0) return 'bg-green-600';
    const redNumbers = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];
    return redNumbers.includes(number) ? 'bg-red-600' : 'bg-black';
  };

  const getSignalStatus = (signal: GeneratedSignal) => {
    const timeData = getTimeRemaining(signal.expires_at);
    return timeData.isExpired ? 'Expirado' : 'Ativo';
  };

  const getStatusColor = (signal: GeneratedSignal) => {
    const status = getSignalStatus(signal);
    return status === 'Expirado' ? 'text-red-500' : 'text-green-500';
  };

  const calculateProgress = (signal: GeneratedSignal) => {
    if (!signal.expires_at || !signal.timestamp_generated) return 0;
    
    const now = new Date().getTime();
    const expiresAt = new Date(signal.expires_at).getTime();
    const createdAt = new Date(signal.timestamp_generated).getTime();
    
    if (isNaN(expiresAt) || isNaN(createdAt)) return 0;
    
    const totalDuration = expiresAt - createdAt;
    let progress = 0;
    
    if (totalDuration > 0) {
      const remaining = Math.max(0, expiresAt - now);
      progress = Math.max(0, Math.min(100, (remaining / totalDuration) * 100));
    } else {
      // Fallback: assumir duração de 60 segundos (mais realista para roleta)
      const timeLeft = Math.max(0, Math.floor((expiresAt - now) / 1000));
      const assumedDuration = 60; // 60 segundos (1 minuto)
      progress = Math.max(0, Math.min(100, (timeLeft / assumedDuration) * 100));
    }
    
    return progress;
  };

  const getTimeAgo = (timestamp_generated: string) => {
    if (!timestamp_generated) return 'Tempo indisponível';
    
    const now = new Date();
    const signalTime = new Date(timestamp_generated);
    
    // Verificar se a data é válida
    if (isNaN(signalTime.getTime())) {
      return 'Tempo inválido';
    }
    
    const diffInMinutes = Math.floor((now.getTime() - signalTime.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'Agora mesmo';
    if (diffInMinutes < 60) return `${diffInMinutes} min atrás`;
    const hours = Math.floor(diffInMinutes / 60);
    if (hours < 24) return `${hours}h atrás`;
    const days = Math.floor(hours / 24);
    return `${days}d atrás`;
  };



  // Categorizar sinais com lógica mais robusta
  const now = new Date();
  const nowTime = now.getTime();
  
  // Primeiro, separar sinais verdadeiramente expirados
  const expiredSignals = displaySignals.filter(signal => {
    if (!signal.expires_at) return false;
    const expiresAt = new Date(signal.expires_at);
    if (isNaN(expiresAt.getTime())) return false;
    return expiresAt.getTime() <= nowTime;
  });
  
  // Sinais ativos (não expirados)
  const activeSignals = displaySignals.filter(signal => {
    if (!signal.expires_at) return true; // Sinais sem expires_at são considerados ativos
    const expiresAt = new Date(signal.expires_at);
    if (isNaN(expiresAt.getTime())) return true;
    return expiresAt.getTime() > nowTime;
  });
  
  // Lógica para "Recentes" e "Anteriores"
  let recentSignals: GeneratedSignal[] = [];
  let olderSignals: GeneratedSignal[] = [];
  
  if (expiredSignals.length > 0) {
    // Se há sinais expirados, usar lógica baseada em expiração
    recentSignals = activeSignals;
    olderSignals = expiredSignals;
  } else {
    // Se não há sinais expirados, dividir baseado no tempo de criação
    const sortedByCreated = [...displaySignals].sort((a, b) => 
      new Date(b.timestamp_generated).getTime() - new Date(a.timestamp_generated).getTime()
    );
    
    if (sortedByCreated.length <= 3) {
      // Poucos sinais: todos são "recentes"
      recentSignals = sortedByCreated;
      olderSignals = [];
    } else {
      // Dividir: 70% mais recentes vs 30% mais antigos
      const recentCount = Math.ceil(sortedByCreated.length * 0.7);
      recentSignals = sortedByCreated.slice(0, recentCount);
      olderSignals = sortedByCreated.slice(recentCount);
    }
  }
  
  const allSignals = displaySignals;

  return (
    <Card className="bg-card/50 backdrop-blur-sm border border-border/50">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-gradient-to-r from-primary/20 to-accent/20 rounded-lg">
              <Zap className="w-5 h-5 text-primary" />
            </div>
            <div>
              <CardTitle className="font-urbanist">Padrões ao Vivo</CardTitle>
              <p className="text-sm text-muted-foreground mt-1 font-jakarta">
                Monitoramento em tempo real das estratégias ativas
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <motion.div
              animate={{ scale: isLive ? [1, 1.2, 1] : 1 }}
              transition={{ duration: 2, repeat: isLive ? Infinity : 0 }}
              className={`w-3 h-3 rounded-full ${isLive ? 'bg-green-500' : 'bg-gray-500'}`}
            />
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsLive(!isLive)}
              className="gap-2"
            >
              {isLive ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
              <span className="font-jakarta">{isLive ? 'Pausar' : 'Iniciar'}</span>
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="recent" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="recent" className="gap-2 font-jakarta">
              <div className="w-2 h-2 bg-green-500 rounded-full" />
              Recentes ({recentSignals.length})
            </TabsTrigger>
            <TabsTrigger value="all" className="gap-2 font-jakarta">
              <div className="w-2 h-2 bg-blue-500 rounded-full" />
              Todos ({allSignals.length})
            </TabsTrigger>
            <TabsTrigger value="older" className="gap-2 font-jakarta">
              <div className="w-2 h-2 bg-gray-500 rounded-full" />
              Anteriores ({olderSignals.length})
            </TabsTrigger>
          </TabsList>

          <TabsContent value="recent" className="mt-6 space-y-4">
            <AnimatePresence>
              {loading ? (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-center py-8 text-muted-foreground font-jakarta"
                >
                  Carregando sinais...
                </motion.div>
              ) : recentSignals.length === 0 ? (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-center py-8 text-muted-foreground font-jakarta"
                >
                  Nenhum sinal recente
                </motion.div>
              ) : (
                recentSignals.map((signal, index) => (
                  <motion.div
                    key={signal.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ delay: index * 0.1 }}
                    className="p-4 rounded-lg border bg-gradient-to-r from-green-500/5 to-blue-500/5 border-green-500/20"
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="gap-1 font-jakarta">
                          <Zap className="w-4 h-4" />
                          ATIVO
                        </Badge>
                        <Badge variant="secondary" className="font-jakarta">
                          {signal.confidence_level} ({getConfidencePercentage(signal.confidence_level)}%)
                        </Badge>
                      </div>
                      <div className="flex flex-col items-end gap-1">
                        {(() => {
                          const timeLeft = signalCountdowns[signal.id]?.timeLeft || 0;
                          const isExpired = timeLeft === 0;
                          const isFinished = signal.status === 'finalizado' || signal.status === 'finished' || signal.status === 'expired' || signal.status === 'validated';
                          
                          // Se o sinal está finalizado, mostrar informação de status em vez de countdown
                          if (isFinished) {
                            return (
                              <div className="flex items-center gap-2 text-sm">
                                <Clock className="w-4 h-4 text-gray-500" />
                                <span className="font-bold font-jakarta text-gray-500">
                                  {signal.status === 'validated' ? 'VALIDADO' : 
                                   signal.status === 'expired' ? 'EXPIRADO' : 
                                   'FINALIZADO'}
                                </span>
                              </div>
                            );
                          }
                          
                          // Para sinais ativos, mostrar countdown e barra de progresso
                          const isUrgent = timeLeft <= 30 && timeLeft > 0;
                          
                          return (
                            <>
                              <div className="flex items-center gap-2 text-sm">
                                <Clock className={`w-4 h-4 ${
                                  isExpired ? 'text-red-500' : 
                                  isUrgent ? 'text-yellow-500' : 
                                  'text-green-500'
                                }`} />
                                <span className={`font-bold font-jakarta ${
                                  isExpired ? 'text-red-500' : 
                                  isUrgent ? 'text-yellow-500' : 
                                  'text-green-500'
                                }`}>
                                  {signalCountdowns[signal.id] ? 
                                    (signalCountdowns[signal.id].timeLeft > 0 ? 
                                      getTimeRemaining(signal.expires_at).display : 
                                      'EXPIRADO'
                                    ) : 
                                    'Carregando...'
                                  }
                                </span>
                              </div>
                              {signalCountdowns[signal.id] && (
                                <div className="w-20 relative">
                                  <Progress 
                                    value={signalCountdowns[signal.id].progress} 
                                    className="h-2"
                                  />
                                  {/* Overlay para sinal expirado */}
                                  {signalCountdowns[signal.id].timeLeft === 0 && (
                                    <motion.div
                                      animate={{ opacity: [0.3, 0.7, 0.3] }}
                                      transition={{ duration: 1, repeat: Infinity }}
                                      className="absolute inset-0 bg-red-500 rounded-full opacity-50"
                                    />
                                  )}
                                  {/* Overlay para sinal urgente (≤30s) */}
                                  {signalCountdowns[signal.id].timeLeft <= 30 && signalCountdowns[signal.id].timeLeft > 0 && (
                                    <motion.div
                                      animate={{ opacity: [0.2, 0.4, 0.2] }}
                                      transition={{ duration: 0.8, repeat: Infinity }}
                                      className="absolute inset-0 bg-yellow-500 rounded-full opacity-30"
                                    />
                                  )}
                                </div>
                              )}
                            </>
                          );
                        })()}
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <p className="text-sm text-muted-foreground font-jakarta">Estratégia</p>
                        <p className="font-medium font-urbanist">{signal.strategy_id}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground font-jakarta">Roleta</p>
                        <p className="font-medium font-urbanist">Roleta {signal.table_id}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground font-jakarta">
                          {signal.is_validated ? 'Lucro Real' : 'Lucro Esperado'}
                        </p>
                        <p className={`font-medium font-urbanist ${
                          signal.is_validated 
                            ? (signal.expected_return > 0 ? 'text-green-600' : 'text-red-600')
                            : 'text-blue-600'
                        }`}>
                          {signal.expected_return !== undefined && signal.expected_return !== null 
                            ? `$${signal.expected_return.toFixed(2)}` 
                            : 'Calculando...'}
                        </p>
                      </div>
                    </div>

                    <div className="mt-4">
                      <p className="text-sm text-muted-foreground mb-2 font-jakarta">Apostas Sugeridas</p>
                      <div className="flex flex-wrap gap-2">
                        {signal.bet_numbers?.map((bet, betIndex) => {
                          const isCategory = typeof bet === 'string' && (bet.includes('-') || bet.includes('to') || isNaN(Number(bet)));
                          const isNumber = !isCategory && !isNaN(Number(bet));
                          const number = isNumber ? Number(bet) : null;
                          
                          return (
                            <motion.div
                              key={betIndex}
                              whileHover={{ scale: 1.05 }}
                              className={`w-8 h-8 font-bold font-jakarta text-xs text-white flex items-center justify-center ${
                                isCategory 
                                  ? 'bg-gradient-to-r from-purple-500 to-pink-500 rounded-full'
                                  : isNumber && number !== null
                                  ? `${getRouletteNumberColor(number)} rounded-full`
                                  : 'bg-gradient-to-r from-primary to-accent rounded-full'
                              }`}
                            >
                              {bet}
                            </motion.div>
                          );
                        })}
                      </div>
                    </div>

                    <div className="mt-4 p-3 bg-muted rounded-lg">
                      <p className="text-sm font-jakarta">{signal.message}</p>
                      <div className="flex justify-between mt-2">
                        <span className="text-xs text-muted-foreground">Status: {signal.status || 'Ativo'}</span>
                        {/* Unidades sugeridas removidas - não existe no schema */}
                      </div>
                    </div>

                    {onGoToTable && (
                      <div className="mt-3 flex justify-end">
                        {(() => {
                          const timeLeft = signalCountdowns[signal.id]?.timeLeft || 0;
                          const isExpired = timeLeft === 0;
                          
                          return (
                            <Button
                              variant={isExpired ? "secondary" : "outline"}
                              size="sm"
                              onClick={() => !isExpired && onGoToTable(signal)}
                              disabled={isExpired}
                              className={`gap-1 text-xs px-3 py-1 h-7 font-jakarta transition-all duration-300 ${
                                isExpired ? 'bg-gray-200 text-gray-500 cursor-not-allowed' : ''
                              }`}
                            >
                              <ExternalLink className="w-3 h-3" />
                              {isExpired ? 'Sinal Expirado' : 'Ir para a Mesa'}
                            </Button>
                          );
                        })()} 
                      </div>
                    )}
                  </motion.div>
                ))
              )}
            </AnimatePresence>
          </TabsContent>

          <TabsContent value="all" className="mt-6 space-y-4">
            <AnimatePresence>
              {loading ? (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-center py-8 text-muted-foreground font-jakarta"
                >
                  Carregando sinais...
                </motion.div>
              ) : allSignals.length === 0 ? (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-center py-8 text-muted-foreground font-jakarta"
                >
                  Nenhum sinal encontrado
                </motion.div>
              ) : (
                allSignals.map((signal, index) => (
                  <motion.div
                    key={signal.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ delay: index * 0.1 }}
                    className="p-4 rounded-lg border bg-gradient-to-r from-blue-500/5 to-purple-500/5 border-blue-500/20"
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="gap-1 font-jakarta">
                          <Zap className="w-4 h-4" />
                          SINAL
                        </Badge>
                        <Badge variant="secondary" className="font-jakarta">
                          {signal.confidence_level} ({getConfidencePercentage(signal.confidence_level)}%)
                        </Badge>
                      </div>
                      <div className="flex flex-col items-end gap-1">
                        {(() => {
                          const timeLeft = signalCountdowns[signal.id]?.timeLeft || 0;
                          const isExpired = timeLeft === 0;
                          const isFinished = signal.status === 'finalizado' || signal.status === 'finished' || signal.status === 'expired' || signal.status === 'validated';
                          
                          // Se o sinal está finalizado, mostrar informação de status em vez de countdown
                          if (isFinished) {
                            return (
                              <div className="flex items-center gap-2 text-sm">
                                <Clock className="w-4 h-4 text-gray-500" />
                                <span className="font-bold font-jakarta text-gray-500">
                                  {signal.status === 'validated' ? 'VALIDADO' : 
                                   signal.status === 'expired' ? 'EXPIRADO' : 
                                   'FINALIZADO'}
                                </span>
                              </div>
                            );
                          }
                          
                          // Para sinais ativos, mostrar countdown e barra de progresso
                          const isUrgent = timeLeft <= 30 && timeLeft > 0;
                          
                          return (
                            <>
                              <div className="flex items-center gap-2 text-sm">
                                <Clock className={`w-4 h-4 ${
                                  isExpired ? 'text-red-500' : 
                                  isUrgent ? 'text-yellow-500' : 
                                  'text-blue-500'
                                }`} />
                                <span className={`font-bold font-jakarta ${
                                  isExpired ? 'text-red-500' : 
                                  isUrgent ? 'text-yellow-500' : 
                                  'text-blue-500'
                                }`}>
                                  {signalCountdowns[signal.id] ? 
                                    (signalCountdowns[signal.id].timeLeft > 0 ? 
                                      getTimeRemaining(signal.expires_at).display : 
                                      'EXPIRADO'
                                    ) : 
                                    'Carregando...'
                                  }
                                </span>
                              </div>
                              {signalCountdowns[signal.id] && (
                                <div className="w-20 relative">
                                  <Progress 
                                    value={signalCountdowns[signal.id].progress} 
                                    className="h-2"
                                  />
                                  {/* Overlay para sinal expirado */}
                                  {signalCountdowns[signal.id].timeLeft === 0 && (
                                    <motion.div
                                      animate={{ opacity: [0.3, 0.7, 0.3] }}
                                      transition={{ duration: 1, repeat: Infinity }}
                                      className="absolute inset-0 bg-red-500 rounded-full opacity-50"
                                    />
                                  )}
                                  {/* Overlay para sinal urgente (≤30s) */}
                                  {signalCountdowns[signal.id].timeLeft <= 30 && signalCountdowns[signal.id].timeLeft > 0 && (
                                    <motion.div
                                      animate={{ opacity: [0.2, 0.4, 0.2] }}
                                      transition={{ duration: 0.8, repeat: Infinity }}
                                      className="absolute inset-0 bg-yellow-500 rounded-full opacity-30"
                                    />
                                  )}
                                </div>
                              )}
                            </>
                          );
                        })()}
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <p className="text-sm text-muted-foreground font-jakarta">Estratégia</p>
                        <p className="font-medium font-urbanist">{signal.strategy_id}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground font-jakarta">Roleta</p>
                        <p className="font-medium font-urbanist">Roleta {signal.table_id}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground font-jakarta">
                          {signal.is_validated ? 'Lucro Real' : 'Lucro Esperado'}
                        </p>
                        <p className={`font-medium font-urbanist ${
                          signal.is_validated 
                            ? (signal.expected_return > 0 ? 'text-green-600' : 'text-red-600')
                            : 'text-blue-600'
                        }`}>
                          {signal.expected_return !== undefined && signal.expected_return !== null 
                            ? `$${signal.expected_return.toFixed(2)}` 
                            : 'Calculando...'}
                        </p>
                      </div>
                    </div>

                    <div className="mt-4">
                      <p className="text-sm text-muted-foreground mb-2 font-jakarta">Apostas Sugeridas</p>
                      <div className="flex flex-wrap gap-2">
                        {signal.bet_numbers?.map((bet, betIndex) => {
                          const isCategory = typeof bet === 'string' && (bet.includes('-') || bet.includes('to') || isNaN(Number(bet)));
                          const isNumber = !isCategory && !isNaN(Number(bet));
                          const number = isNumber ? Number(bet) : null;
                          
                          return (
                            <motion.div
                              key={betIndex}
                              whileHover={{ scale: 1.05 }}
                              className={`w-8 h-8 font-bold font-jakarta text-xs text-white flex items-center justify-center ${
                                isCategory 
                                  ? 'bg-gradient-to-r from-purple-500 to-pink-500 rounded-full'
                                  : isNumber && number !== null
                                  ? `${getRouletteNumberColor(number)} rounded-full`
                                  : 'bg-gradient-to-r from-primary to-accent rounded-full'
                              }`}
                            >
                              {bet}
                            </motion.div>
                          );
                        })}
                      </div>
                    </div>

                    <div className="mt-4 p-3 bg-muted rounded-lg">
                      <p className="text-sm font-jakarta">{signal.message}</p>
                      <div className="flex justify-between mt-2">
                        <span className="text-xs text-muted-foreground">Status: {signal.status || 'Processado'}</span>
                        {/* Unidades sugeridas removidas - não existe no schema */}
                      </div>
                    </div>

                    {onGoToTable && (
                      <div className="mt-3 flex justify-end">
                        {(() => {
                          const timeLeft = signalCountdowns[signal.id]?.timeLeft || 0;
                          const isExpired = timeLeft === 0;
                          
                          return (
                            <Button
                              variant={isExpired ? "secondary" : "outline"}
                              size="sm"
                              onClick={() => !isExpired && onGoToTable(signal)}
                              disabled={isExpired}
                              className={`gap-1 text-xs px-3 py-1 h-7 font-jakarta transition-all duration-300 ${
                                isExpired ? 'bg-gray-200 text-gray-500 cursor-not-allowed' : ''
                              }`}
                            >
                              <ExternalLink className="w-3 h-3" />
                              {isExpired ? 'Sinal Expirado' : 'Ir para a Mesa'}
                            </Button>
                          );
                        })()} 
                      </div>
                    )}
                  </motion.div>
                ))
              )}
            </AnimatePresence>
          </TabsContent>

          <TabsContent value="older" className="mt-6 space-y-4">
            <AnimatePresence>
              {loading ? (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-center py-8 text-muted-foreground font-jakarta"
                >
                  Carregando sinais...
                </motion.div>
              ) : olderSignals.length === 0 ? (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="text-center py-8 text-muted-foreground font-jakarta"
                >
                  Nenhum sinal anterior
                </motion.div>
              ) : (
                olderSignals.map((signal, index) => (
                  <motion.div
                    key={signal.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ delay: index * 0.1 }}
                    className="p-4 rounded-lg border bg-gradient-to-r from-gray-500/5 to-slate-500/5 border-gray-500/20"
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="gap-1 font-jakarta">
                          <Clock className="w-4 h-4" />
                          ANTERIOR
                        </Badge>
                        <Badge variant="secondary" className="font-jakarta">
                          {signal.confidence_level} ({getConfidencePercentage(signal.confidence_level)}%)
                        </Badge>
                      </div>
                      <div className="flex flex-col items-end gap-1">
                        {(() => {
                          const timeLeft = signalCountdowns[signal.id]?.timeLeft || 0;
                          const isFinished = signal.status === 'finalizado' || signal.status === 'finished' || signal.status === 'expired' || signal.status === 'validated';
                          
                          // Se o sinal está finalizado, mostrar informação de status em vez de countdown
                          if (isFinished) {
                            return (
                              <div className="flex items-center gap-2 text-sm">
                                <Clock className="w-4 h-4 text-gray-500" />
                                <span className="font-bold font-jakarta text-gray-500">
                                  {signal.status === 'validated' ? 'VALIDADO' : 
                                   signal.status === 'expired' ? 'EXPIRADO' : 
                                   'FINALIZADO'}
                                </span>
                              </div>
                            );
                          }
                          
                          // Para sinais ativos ou antigos, mostrar countdown ou tempo decorrido
                          return (
                            <>
                              <div className="flex items-center gap-2 text-sm">
                                <Clock className="w-4 h-4 text-gray-500" />
                                <span className={`font-bold font-jakarta ${
                                  signalCountdowns[signal.id] && signalCountdowns[signal.id].timeLeft === 0 
                                    ? 'text-red-500' 
                                    : signalCountdowns[signal.id] && signalCountdowns[signal.id].timeLeft <= 30 
                                    ? 'text-yellow-500' 
                                    : 'text-gray-500'
                                }`}>
                                  {signalCountdowns[signal.id] ? 
                                    (signalCountdowns[signal.id].timeLeft > 0 ? 
                                      getTimeRemaining(signal.expires_at).display : 
                                      'Expirado'
                                    ) : 
                                    getTimeAgo(signal.timestamp_generated)
                                  }
                                </span>
                              </div>
                              {signalCountdowns[signal.id] && signalCountdowns[signal.id].timeLeft > 0 && (
                                <div className="w-20 relative">
                                  <Progress 
                                    value={signalCountdowns[signal.id].progress} 
                                    className="h-1 opacity-50"
                                  />
                                  {signalCountdowns[signal.id].timeLeft <= 30 && (
                                    <motion.div
                                      className="absolute inset-0 bg-yellow-400/20 rounded-full"
                                      animate={{ opacity: [0.2, 0.6, 0.2] }}
                                      transition={{ duration: 1, repeat: Infinity }}
                                    />
                                  )}
                                </div>
                              )}
                            </>
                          );
                        })()}
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <p className="text-sm text-muted-foreground font-jakarta">Estratégia</p>
                        <p className="font-medium font-urbanist">{signal.strategy_id}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground font-jakarta">Roleta</p>
                        <p className="font-medium font-urbanist">Roleta {signal.table_id}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground font-jakarta">
                          {signal.is_validated ? 'Lucro Real' : 'Lucro Esperado'}
                        </p>
                        <p className={`font-medium font-urbanist ${
                          signal.is_validated 
                            ? (signal.expected_return > 0 ? 'text-green-600' : 'text-red-600')
                            : 'text-gray-500'
                        }`}>
                          {signal.expected_return !== undefined && signal.expected_return !== null 
                            ? `$${signal.expected_return.toFixed(2)}` 
                            : 'Calculando...'}
                        </p>
                      </div>
                    </div>

                    <div className="mt-4">
                      <p className="text-sm text-muted-foreground mb-2 font-jakarta">Apostas Sugeridas</p>
                      <div className="flex flex-wrap gap-2">
                        {signal.bet_numbers?.map((bet, betIndex) => {
                          const isCategory = typeof bet === 'string' && (bet.includes('-') || bet.includes('to') || isNaN(Number(bet)));
                          const isNumber = !isCategory && !isNaN(Number(bet));
                          const number = isNumber ? Number(bet) : null;
                          
                          return (
                            <motion.div
                              key={betIndex}
                              whileHover={{ scale: 1.05 }}
                              className={`w-8 h-8 font-bold font-jakarta text-xs text-white flex items-center justify-center ${
                                isCategory 
                                  ? 'bg-gradient-to-r from-gray-500 to-gray-700 rounded-full opacity-75'
                                  : isNumber && number !== null
                                  ? `${getRouletteNumberColor(number)} rounded-full opacity-75`
                                  : 'bg-gradient-to-r from-gray-400 to-gray-600 rounded-full opacity-75'
                              }`}
                            >
                              {bet}
                            </motion.div>
                          );
                        })}
                      </div>
                    </div>

                    <div className="mt-4 p-3 bg-muted rounded-lg">
                      <p className="text-sm font-jakarta">{signal.message}</p>
                      <div className="flex justify-between mt-2">
                        <span className="text-xs text-muted-foreground">Status: {signal.status || 'Finalizado'}</span>
                        {/* Unidades sugeridas removidas - não existe no schema */}
                      </div>
                    </div>

                    {onGoToTable && (
                      <div className="mt-3 flex justify-end">
                        {(() => {
                          const timeLeft = signalCountdowns[signal.id]?.timeLeft || 0;
                          const isExpired = timeLeft === 0;
                          
                          return (
                            <Button
                              variant={isExpired ? "secondary" : "outline"}
                              size="sm"
                              onClick={() => !isExpired && onGoToTable(signal)}
                              disabled={isExpired}
                              className={`gap-1 text-xs px-3 py-1 h-7 font-jakarta transition-all duration-300 ${
                                isExpired ? 'bg-gray-200 text-gray-500 cursor-not-allowed' : ''
                              }`}
                            >
                              <ExternalLink className="w-3 h-3" />
                              {isExpired ? 'Sinal Expirado' : 'Ir para a Mesa'}
                            </Button>
                          );
                        })()} 
                      </div>
                    )}
                  </motion.div>
                ))
              )}
            </AnimatePresence>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}