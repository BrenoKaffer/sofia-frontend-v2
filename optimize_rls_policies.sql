-- =====================================================
-- OTIMIZA√á√ÉO DE POL√çTICAS RLS
-- =====================================================
-- Este script otimiza as pol√≠ticas RLS para evitar que fun√ß√µes auth()
-- sejam reavaliadas para cada linha, melhorando significativamente a performance

-- =====================================================
-- 1. OTIMIZAR POL√çTICAS DE USER_PROFILES
-- =====================================================

-- Remover pol√≠ticas existentes
DROP POLICY IF EXISTS "Users can view own profile" ON public.user_profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON public.user_profiles;
DROP POLICY IF EXISTS "Allow service_role full access to user_profiles" ON public.user_profiles;
DROP POLICY IF EXISTS "Allow authenticated access to user_profiles" ON public.user_profiles;

-- Criar pol√≠ticas otimizadas com subqueries
CREATE POLICY "Users can view own profile" ON public.user_profiles
    FOR SELECT USING (
        user_id = (SELECT auth.uid())
    );

CREATE POLICY "Users can update own profile" ON public.user_profiles
    FOR UPDATE USING (
        user_id = (SELECT auth.uid())
    );

CREATE POLICY "Allow service_role full access to user_profiles" ON public.user_profiles
    FOR ALL USING (
        (SELECT auth.role()) = 'service_role'
    );

CREATE POLICY "Allow authenticated access to user_profiles" ON public.user_profiles
    FOR ALL USING (
        (SELECT auth.role()) = 'authenticated'
    );

-- =====================================================
-- 2. OTIMIZAR POL√çTICAS DE USER_PREFERENCES
-- =====================================================

-- Remover pol√≠ticas existentes
DROP POLICY IF EXISTS "Users can view own preferences" ON public.user_preferences;
DROP POLICY IF EXISTS "Users can update own preferences" ON public.user_preferences;
DROP POLICY IF EXISTS "Users can insert own preferences" ON public.user_preferences;

-- Criar pol√≠ticas otimizadas
CREATE POLICY "Users can view own preferences" ON public.user_preferences
    FOR SELECT USING (
        id = (SELECT auth.uid())
    );

CREATE POLICY "Users can update own preferences" ON public.user_preferences
    FOR UPDATE USING (
        id = (SELECT auth.uid())
    );

CREATE POLICY "Users can insert own preferences" ON public.user_preferences
    FOR INSERT WITH CHECK (
        id = (SELECT auth.uid())
    );

-- =====================================================
-- 3. OTIMIZAR POL√çTICAS DE AUDIT_LOGS
-- =====================================================

-- Remover pol√≠ticas existentes
DROP POLICY IF EXISTS "Users can view audit logs" ON public.audit_logs;
DROP POLICY IF EXISTS "Allow authenticated read access to audit_logs" ON public.audit_logs;
DROP POLICY IF EXISTS "Allow service_role full access to audit_logs" ON public.audit_logs;

-- Criar pol√≠ticas otimizadas
CREATE POLICY "Users can view own audit logs" ON public.audit_logs
    FOR SELECT USING (
        (SELECT auth.role()) = 'authenticated' AND 
        (user_id IS NULL OR user_id = (SELECT auth.uid()))
    );

CREATE POLICY "Allow service_role full access to audit_logs" ON public.audit_logs
    FOR ALL USING (
        (SELECT auth.role()) = 'service_role'
    );

-- =====================================================
-- 4. OTIMIZAR POL√çTICAS DE GENERATED_SIGNALS
-- =====================================================

-- Remover pol√≠ticas existentes
DROP POLICY IF EXISTS "Allow authenticated read access to generated_signals" ON public.generated_signals;
DROP POLICY IF EXISTS "Allow service_role full access to generated_signals" ON public.generated_signals;

-- Criar pol√≠ticas otimizadas
CREATE POLICY "Allow authenticated read access to generated_signals" ON public.generated_signals
    FOR SELECT USING (
        (SELECT auth.role()) = 'authenticated'
    );

CREATE POLICY "Allow service_role full access to generated_signals" ON public.generated_signals
    FOR ALL USING (
        (SELECT auth.role()) = 'service_role'
    );

-- =====================================================
-- 5. OTIMIZAR POL√çTICAS DE STRATEGY_SIGNALS
-- =====================================================

-- Remover pol√≠ticas existentes
DROP POLICY IF EXISTS "Allow authenticated read access to strategy_signals" ON public.strategy_signals;
DROP POLICY IF EXISTS "Allow service_role full access to strategy_signals" ON public.strategy_signals;

-- Criar pol√≠ticas otimizadas
CREATE POLICY "Allow authenticated read access to strategy_signals" ON public.strategy_signals
    FOR SELECT USING (
        (SELECT auth.role()) = 'authenticated'
    );

CREATE POLICY "Allow service_role full access to strategy_signals" ON public.strategy_signals
    FOR ALL USING (
        (SELECT auth.role()) = 'service_role'
    );

-- =====================================================
-- 6. OTIMIZAR POL√çTICAS DE STRATEGY_ACTIVATIONS
-- =====================================================

-- Remover pol√≠ticas existentes
DROP POLICY IF EXISTS "Allow authenticated read access to strategy_activations" ON public.strategy_activations;
DROP POLICY IF EXISTS "Allow service_role full access to strategy_activations" ON public.strategy_activations;

-- Criar pol√≠ticas otimizadas
CREATE POLICY "Allow authenticated read access to strategy_activations" ON public.strategy_activations
    FOR SELECT USING (
        (SELECT auth.role()) = 'authenticated'
    );

CREATE POLICY "Allow service_role full access to strategy_activations" ON public.strategy_activations
    FOR ALL USING (
        (SELECT auth.role()) = 'service_role'
    );

-- =====================================================
-- 7. OTIMIZAR POL√çTICAS DE ROULETTE_SPINS
-- =====================================================

-- Remover pol√≠ticas existentes
DROP POLICY IF EXISTS "Allow authenticated read access to roulette_spins" ON public.roulette_spins;

-- Criar pol√≠ticas otimizadas
CREATE POLICY "Allow authenticated read access to roulette_spins" ON public.roulette_spins
    FOR SELECT USING (
        (SELECT auth.role()) = 'authenticated'
    );

-- =====================================================
-- 8. CRIAR FUN√á√ÉO AUXILIAR PARA CACHE DE AUTH
-- =====================================================

-- Fun√ß√£o para cachear o resultado de auth.uid() durante a transa√ß√£o
CREATE OR REPLACE FUNCTION public.cached_auth_uid()
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
STABLE
AS $$
DECLARE
    cached_uid uuid;
BEGIN
    -- Tentar obter do cache da transa√ß√£o
    BEGIN
        cached_uid := current_setting('app.cached_auth_uid', true)::uuid;
        IF cached_uid IS NOT NULL THEN
            RETURN cached_uid;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            -- Ignorar erro se n√£o estiver definido
            NULL;
    END;
    
    -- Obter e cachear o auth.uid()
    cached_uid := auth.uid();
    PERFORM set_config('app.cached_auth_uid', cached_uid::text, true);
    
    RETURN cached_uid;
END;
$$;

-- Fun√ß√£o para cachear o resultado de auth.role() durante a transa√ß√£o
CREATE OR REPLACE FUNCTION public.cached_auth_role()
RETURNS text
LANGUAGE plpgsql
SECURITY DEFINER
STABLE
AS $$
DECLARE
    cached_role text;
BEGIN
    -- Tentar obter do cache da transa√ß√£o
    BEGIN
        cached_role := current_setting('app.cached_auth_role', true);
        IF cached_role IS NOT NULL AND cached_role != '' THEN
            RETURN cached_role;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            -- Ignorar erro se n√£o estiver definido
            NULL;
    END;
    
    -- Obter e cachear o auth.role()
    cached_role := auth.role();
    PERFORM set_config('app.cached_auth_role', cached_role, true);
    
    RETURN cached_role;
END;
$$;

-- =====================================================
-- 9. POL√çTICAS ALTERNATIVAS COM CACHE (OPCIONAL)
-- =====================================================

-- Se quiser usar as fun√ß√µes de cache, descomente e use estas pol√≠ticas:

/*
-- Exemplo para user_profiles com cache
DROP POLICY IF EXISTS "Users can view own profile" ON public.user_profiles;
CREATE POLICY "Users can view own profile" ON public.user_profiles
    FOR SELECT USING (
        user_id = public.cached_auth_uid()
    );
*/

-- =====================================================
-- 10. VERIFICA√á√ÉO DE PERFORMANCE
-- =====================================================

-- Query para verificar o plano de execu√ß√£o das pol√≠ticas
-- Execute no psql ou Supabase SQL Editor:

/*
EXPLAIN (ANALYZE, BUFFERS) 
SELECT * FROM public.user_profiles 
WHERE user_id = auth.uid();
*/

-- =====================================================
-- 11. COMENT√ÅRIOS E DOCUMENTA√á√ÉO
-- =====================================================

COMMENT ON FUNCTION public.cached_auth_uid() IS 'Fun√ß√£o que cacheia auth.uid() durante a transa√ß√£o para melhor performance em RLS';
COMMENT ON FUNCTION public.cached_auth_role() IS 'Fun√ß√£o que cacheia auth.role() durante a transa√ß√£o para melhor performance em RLS';

-- =====================================================
-- RESULTADO ESPERADO
-- =====================================================

/*
üéØ BENEF√çCIOS DA OTIMIZA√á√ÉO:

1. ‚úÖ Fun√ß√µes auth() s√£o avaliadas apenas uma vez por query
2. ‚úÖ Subqueries previnem reavalia√ß√£o para cada linha
3. ‚úÖ Fun√ß√µes de cache opcionais para casos extremos
4. ‚úÖ Melhoria significativa na performance de queries grandes
5. ‚úÖ Redu√ß√£o da carga no servidor de autentica√ß√£o

üìä IMPACTO ESPERADO:
- Queries com muitas linhas: 50-90% mais r√°pidas
- Redu√ß√£o no uso de CPU do servidor
- Melhor experi√™ncia do usu√°rio
- Menor lat√™ncia nas consultas
*/