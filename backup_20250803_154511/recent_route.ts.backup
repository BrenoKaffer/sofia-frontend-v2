import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// Configuração do Supabase
const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

export async function GET(request: NextRequest) {
  try {
    // Verificar autorização
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Token de autorização necessário' },
        { status: 401 }
      );
    }

    // Extrair parâmetros da query
    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '50');
    const tableId = searchParams.get('table_id');

    // Construir query incluindo campos de validação
    let query = supabase
      .from('generated_signals')
      .select('*, validation_result, winning_number, net_payout, validated_at')
      .order('timestamp_generated', { ascending: false })
      .limit(limit);

    // Filtrar por table_id se fornecido
    if (tableId) {
      query = query.eq('table_id', tableId);
    }

    const { data, error } = await query;

    if (error) {
      console.error('Erro ao buscar sinais:', error);
      return NextResponse.json(
        { error: 'Erro interno do servidor' },
        { status: 500 }
      );
    }

    // Transformar dados para incluir expected_return calculado
    const transformedData = (data || []).map(signal => ({
      ...signal,
      // Se o sinal foi validado, usar o net_payout real, senão calcular estimativa
      expected_return: signal.is_validated && signal.net_payout !== null 
        ? signal.net_payout 
        : signal.suggested_units * 10 // Estimativa padrão
    }));
    
    return NextResponse.json(transformedData);
  } catch (error) {
    console.error('Erro na API de sinais recentes:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}